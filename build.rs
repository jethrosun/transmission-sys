use std::env;
use std::path::PathBuf;

use bindgen;
use cmake;

fn main() {
    // This links a system-installed libtransmission
    // Uncomment if you want to use the system version
    println!("cargo:rustc-link-lib=transmission");
    println!("cargo:rustc-link-lib=crypto");
    println!("cargo:rustc-link-lib=z");
    println!("cargo:rustc-link-lib=dylib=event");
    println!("cargo:rustc-link-lib=dylib=event_core");
    println!("cargo:rustc-link-lib=dylib=event_extra");

    // This builds and links the bundled libtransmission
    // Comment until indicated if you want to use the system version
    /*
    let dst = cmake::Config::new("vendor")
        // Turn everything we don't want off
        .define("ENABLE_DAEMON", "OFF")
        .define("ENABLE_GTK", "OFF")
        .define("ENABLE_QT", "OFF")
        .define("ENABLE_MAC", "OFF")
        .define("ENABLE_UTILS", "OFF")
        .define("ENABLE_CLI", "OFF")
        .define("ENABLE_TESTS", "OFF")
        .define("ENABLE_LIGHTWEIGHT", "OFF")
        .define("ENABLE_NLS", "OFF")
        .define("INSTALL_DOC", "OFF")
        .define("USE_SYSTEM_DHT", "OFF")
        .define("USE_SYSTEM_MINIUPNPC", "OFF")
        .define("USE_SYSTEM_NATPMP", "OFF")
        .define("USE_SYSTEM_UTP", "OFF")
        .define("USE_SYSTEM_B64", "OFF")
        .define("WITH_INOTIFY", "OFF")
        .define("WITH_KQUEUE", "OFF")
        .define("WITH_LIBAPPINDICATOR", "OFF")
        .define("WITH_SYSTEMD", "OFF")
        // Turn a few things on
        .define("ENABLE_UTP", "ON")
        .define("INSTALL_LIB", "ON")
        .define("WITH_CRYPTO", "openssl")
        // This is until Transmission fixes it
        .define("USE_SYSTEM_EVENT2", "ON")
        .build();
    
    println!("cargo:rustc-link-search=native={}", dst.join("lib64").display());
    println!("cargo:rustc-link-lib=static=transmission");
    // Stop commenting here if using the system version
    */
    let bindings = bindgen::Builder::default()
        .header("wrapper.h")
        // Comment out to enable layout tests
        // These are autogenerated so may fail for no reason
        .layout_tests(false)
        .generate()
        .expect("Failed to generate bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Failed to write bindings");
}
